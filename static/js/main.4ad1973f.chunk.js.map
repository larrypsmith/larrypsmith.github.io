{"version":3,"sources":["images/bitter.png","images/plotify.png","images/thought-board.png","data.js","components/Project.jsx","components/ProjectList.jsx","components/GreetingBanner.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","projects","bitter","title","subtitle","description","image","website","gitHub","thoughtBoard","plotify","Card","Link","href","underline","CardActionArea","CardMedia","component","height","CardContent","Typography","variant","CardActions","Button","color","size","Fragment","Grid","container","spacing","Object","values","map","project","i","item","key","xs","sm","Project","Paper","className","Container","gutterBottom","App","StylesProvider","injectFirst","CssBaseline","GreetingBanner","ProjectList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,kRCI9BC,EAAW,CACtBC,OAAQ,CACNC,MAAO,SACPC,SAAU,mBACVC,YAAa,wGACbC,MAAOJ,IACPK,QAAS,qCACTC,OAAQ,yCAEVC,aAAc,CACZN,MAAO,eACPC,SAAU,qCACVC,YAAa,uGACbC,MAAOG,IACPF,QAAS,qDACTC,OAAQ,gDAEVE,QAAS,CACPP,MAAO,UACPC,SAAU,yCACVC,YAAa,mHACbC,MAAOI,IACPH,QAAS,yCACTC,OAAQ,2C,wDCfG,kBAAGL,EAAH,EAAGA,MAAOE,EAAV,EAAUA,YAAaC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,QAASC,EAAvC,EAAuCA,OAAvC,OACb,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,KAAMN,EAASO,UAAU,QAC7B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVX,MAAOA,EACPY,OAAQ,QAId,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MACjBlB,GAEH,kBAACiB,EAAA,EAAD,CAAYC,QAAQ,SACjBhB,IAGL,kBAACiB,EAAA,EAAD,KACE,kBAACV,EAAA,EAAD,CAAMC,KAAMN,EAASO,UAAU,QAC7B,kBAACS,EAAA,EAAD,CAAQC,MAAM,UAAUC,KAAK,SAA7B,YAIF,kBAACb,EAAA,EAAD,CAAMC,KAAML,EAAQM,UAAU,QAC5B,kBAACS,EAAA,EAAD,CAAQC,MAAM,UAAUC,KAAK,SAA7B,cC7BO,oBACb,kBAAC,IAAMC,SAAP,KACE,kBAACN,EAAA,EAAD,CAAYC,QAAQ,MAApB,YAGA,kBAACM,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GAErBC,OAAOC,OAAO9B,GAAU+B,KAAI,SAACC,EAASC,GAAV,OAC1B,kBAACP,EAAA,EAAD,CACEQ,MAAI,EACJC,IAAKF,EACLG,GAAI,GACJC,GAAI,GAEJ,kBAACC,EAAD,CACEpC,MAAO8B,EAAQ9B,MACfE,YAAa4B,EAAQ5B,YACrBC,MAAO2B,EAAQ3B,MACfC,QAAS0B,EAAQ1B,QACjBC,OAAQyB,EAAQzB,gB,QCnBf,G,MAAA,kBACb,kBAACgC,EAAA,EAAD,CAAOC,UAAU,kBACf,kBAACC,EAAA,EAAD,KACE,yBAAKD,UAAU,YACb,kBAACrB,EAAA,EAAD,CAAYC,QAAQ,KAAKoB,UAAU,aAAaE,cAAY,GAA5D,kBAGA,kBAACvB,EAAA,EAAD,CAAYC,QAAQ,KAAKoB,UAAU,cAAnC,4C,MCMOG,MAZf,WACE,OACE,kBAACC,EAAA,EAAD,CAAgBC,aAAW,GACzB,kBAACC,EAAA,EAAD,MACE,kBAACC,EAAD,MACF,kBAACN,EAAA,EAAD,KACE,kBAACO,EAAD,SCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ad1973f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bitter.7955a900.png\";","module.exports = __webpack_public_path__ + \"static/media/plotify.a9ead9e9.png\";","module.exports = __webpack_public_path__ + \"static/media/thought-board.fb2e67c8.png\";","import bitter from './images/bitter.png';\nimport plotify from './images/plotify.png';\nimport thoughtBoard from './images/thought-board.png';\n\nexport const projects = {\n  bitter: {\n    title: \"Bitter\",\n    subtitle: \"An Untappd Clone\",\n    description: \"Bitter is a social media web app where users rate, review and discuss beer. It is a clone of Untappd.\",\n    image: bitter,\n    website: \"https://bitterapp.herokuapp.com/#/\",\n    gitHub: \"https://github.com/larrypsmith/Bitter\"\n  },\n  thoughtBoard: {\n    title: \"ThoughtBoard\",\n    subtitle: \"An Image-Based Note-Taking Web App\",\n    description: \"ThoughtBoard lets users create notes that can be dragged around the screen and organized as desired.\",\n    image: thoughtBoard,\n    website: \"https://thought-board-labs.herokuapp.com/#/profile\",\n    gitHub: \"https://github.com/larrypsmith/thought-board\"\n  },\n  plotify: {\n    title: \"Plotify\",\n    subtitle: \"A personalized Spotify data visualizer\",\n    description: \"Plotify visualizes your top Spotify artists and genres in a circle-packing chart that shows their relationships.\",\n    image: plotify,\n    website: \"https://larrypsmith.github.io/plotify/\",\n    gitHub: \"https://github.com/larrypsmith/plotify\"\n  }\n}","import React from 'react';\nimport {\n  Button,\n  Card,\n  CardActionArea,\n  CardActions,\n  CardMedia,\n  CardContent,\n  Link,\n  Typography,\n} from '@material-ui/core';\n\nexport default ({ title, description, image, website, gitHub }) => (\n  <Card>\n    <Link href={website} underline=\"none\">\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          image={image}\n          height={180}\n        />\n      </CardActionArea>\n    </Link>\n    <CardContent>\n      <Typography variant=\"h5\">\n        {title}\n      </Typography>\n      <Typography variant=\"body1\">\n        {description}\n      </Typography>\n    </CardContent>\n    <CardActions>\n      <Link href={website} underline=\"none\">\n        <Button color=\"primary\" size=\"small\">\n          Website\n        </Button>\n      </Link>\n      <Link href={gitHub} underline=\"none\">\n        <Button color=\"primary\" size=\"small\">\n          GitHub\n        </Button>\n      </Link>\n    </CardActions>\n  </Card>\n)","import React from 'react';\nimport {\n  Grid,\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport { projects } from '../data';\nimport Project from './Project';\n\nexport default () => (\n  <React.Fragment>\n    <Typography variant=\"h3\">\n      Projects\n    </Typography>\n    <Grid container spacing={2}>\n      {\n        Object.values(projects).map((project, i) => (\n          <Grid\n            item\n            key={i}\n            xs={12}\n            sm={4}\n          >\n            <Project\n              title={project.title}\n              description={project.description}\n              image={project.image}\n              website={project.website}\n              gitHub={project.gitHub}\n            />\n          </Grid>\n        ))\n      }\n    </Grid>\n  </React.Fragment>\n)","import React from 'react';\nimport {\n  Container,\n  Grid,\n  Paper,\n  Typography\n} from '@material-ui/core';\nimport '../styles/greeting.css'\n\nexport default () => (\n  <Paper className=\"GreetingBanner\">\n    <Container>\n      <div className=\"overlay\" />\n        <Typography variant=\"h2\" className=\"title-text\" gutterBottom>\n          Hi, I'm Larry.\n        </Typography>\n        <Typography variant=\"h3\" className=\"title-text\">\n          I build web apps that do cool stuff.\n        </Typography>\n    </Container>\n  </Paper>\n)","import React from 'react';\nimport {\n  CssBaseline,\n  Container\n} from '@material-ui/core'\nimport { StylesProvider } from '@material-ui/core/styles'\nimport ProjectList from './components/ProjectList';\nimport GreetingBanner from './components/GreetingBanner'\nimport './App.css';\n\nfunction App() {\n  return (\n    <StylesProvider injectFirst>\n      <CssBaseline />\n        <GreetingBanner />\n      <Container>\n        <ProjectList />\n      </Container>\n    </StylesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}